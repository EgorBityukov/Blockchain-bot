// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using mmTransactionDB.DataAccess;

#nullable disable

namespace mmTransactionDB.Migrations
{
    [DbContext(typeof(mmTransactionDBContext))]
    [Migration("20221026115052_DecimalValues")]
    partial class DecimalValues
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("mmTransactionDB.Models.mmTransaction", b =>
                {
                    b.Property<string>("txId")
                        .HasColumnType("text");

                    b.Property<decimal>("BalanceUSDCToken")
                        .HasColumnType("numeric");

                    b.Property<decimal>("BalanceXToken")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OperationType")
                        .HasColumnType("text");

                    b.Property<decimal>("RecieveTokenCount")
                        .HasColumnType("numeric");

                    b.Property<string>("RecieveTokenMint")
                        .HasColumnType("text");

                    b.Property<string>("RecieveWalletAddress")
                        .HasColumnType("text");

                    b.Property<decimal>("SendTokenCount")
                        .HasColumnType("numeric");

                    b.Property<string>("SendTokenMint")
                        .HasColumnType("text");

                    b.Property<string>("SendWalletAddress")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("txId");

                    b.ToTable("mmTransactions");
                });

            modelBuilder.Entity("mmTransactionDB.Models.Token", b =>
                {
                    b.Property<string>("PublicKey")
                        .HasColumnType("text");

                    b.Property<string>("Amount")
                        .HasColumnType("text");

                    b.Property<decimal>("AmountDouble")
                        .HasColumnType("numeric");

                    b.Property<string>("Mint")
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PublicKey");

                    b.HasIndex("OwnerId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("mmTransactionDB.Models.Wallet", b =>
                {
                    b.Property<string>("PublicKey")
                        .HasColumnType("text");

                    b.Property<decimal>("ApproximateMintPrice")
                        .HasColumnType("numeric");

                    b.Property<bool>("HotWallet")
                        .HasColumnType("boolean");

                    b.Property<long>("Lamports")
                        .HasColumnType("bigint");

                    b.Property<string>("PrivateKey")
                        .HasColumnType("text");

                    b.Property<decimal>("SOL")
                        .HasColumnType("numeric");

                    b.HasKey("PublicKey");

                    b.HasIndex("PrivateKey", "PublicKey")
                        .IsUnique();

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("mmTransactionDB.Models.Token", b =>
                {
                    b.HasOne("mmTransactionDB.Models.Wallet", "Owner")
                        .WithMany("Tokens")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("mmTransactionDB.Models.Wallet", b =>
                {
                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
